<?php
/**
 * @file
 * Code for the VRC Support Manager Dashboard feature.
 */

include_once 'vrc_dashboard.features.inc';

/**
 * Implements hook_form_FORM_ID_alter()
 */
function vrc_dashboard_form_homebox_admin_display_form_alter(&$form, &$form_state) {
  // Remove all the blocks generated by 'userpoints' module to git rid of the
  // error 'Input variables exceeded 1000.'
  // @see: http://drupal.org/node/1759392
  foreach(element_children($form) as $key) {
    if (!empty($form[$key]['module']) && $form[$key]['module']['#value'] == 'userpoints') {
      unset($form[$key]);
    }
  }
}

/**
 * Implements hook_form_alter()
 */
function vrc_dashboard_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      // $form['#submit'][] = 'vrc_dashboard_user_login_form_submit';
      break;
  }
}

/**
 * Submit handler attached to 'user_login' form
 * @see: user_login_submit()
 * XXX: Check why the redirection doesn't work
 */
function vrc_dashboard_user_login_form_submit(&$form, &$form_state) {
//   $user = user_load($form_state['uid']);
//   if (vrc_dashboard_user_should_redirect_to_dashboard($user)) {
//     drupal_set_message('redirect');
//     // @todo: Get the path from hombox configuration
//     $form_state['redirect'] = 'support_manager_dashboard';
//   }
}

/**
 * Implements hook_user_login()
 */
function vrc_dashboard_user_login(&$edit, $account) {
  // @todo: Get the path from hombox configuration
  $redirect = 'support_manager_dashboard';

  // Don't redirect if the user is resetting password
  if (!empty($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset') {
    return;
  }

  if (vrc_dashboard_user_should_redirect_to_dashboard($account)) {
    // XXX: Check why the following line doesn't work
    // $edit['redirect'] = $redirect;
    $_GET['destination'] = $redirect;
  }
}

/**
 * Check if a given is user is of role 'admin' or 'support'
 */
function vrc_dashboard_user_should_redirect_to_dashboard($user) {
  $redirection = FALSE;
  if (is_numeric($user)) {
    $user = user_load($user);
  }

  // Check if the user is of role 'administrator' or 'support'
  if ($user) {
    $result = db_select('role', 'r')
      ->fields('r')
      ->condition('name', array('administrator', 'support'))
      ->execute()
      ->fetchAllAssoc('rid');
    $redirect_role_ids = !empty($result) ? array_keys($result) : array();
    $user_role_ids = !empty($user->roles) ? array_keys($user->roles) : array();
    $intersection = array_intersect($redirect_role_ids, $user_role_ids);
    if (!empty($intersection)) {
      $redirection = TRUE;
    }
  }

  return $redirection;
}

/**
 * Implements hook_admin_paths()
 */
function vrc_dashboard_admin_paths() {
  $paths = array();
  // The support manager homebox dashboard should use admin theme
  $homebox_page = homebox_get_page('support_manager_dashboard');
  if (!empty($homebox_page)) {
    $homebox_page_path = homebox_get_path($homebox_page);
    $paths[$homebox_page_path] = TRUE;
  }

  // The interior pages should also use admin theme
  $dashboard_views = array(
    'dashboard_content',
    'dashboard_user'
  );
  foreach ($dashboard_views as $views_name) {
    $views = views_get_view($views_name);
    if (!empty($views->display)) {
      foreach ($views->display as $display) {
        if ($display->display_plugin == 'page') {
          if (!empty($display->display_options['path'])) {
            $paths[$display->display_options['path']] = TRUE;
          }
        }
      }
    }
  }

  return $paths;
}

/**
 * Implements hook_node_insert()
 * @see: message_example_node_insert()
 */
function vrc_dashboard_node_insert($node) {
  $account = user_load($node->uid);

  if (in_array($node->type, array('answer', 'question'))) {
    $answer_count = vrc_dashboard_get_user_answer_count($account->uid);
    $question_count = vrc_dashboard_get_user_question_count($account->uid);
  }

  switch ($node->type) {
    // If the user has just post a new question
    case 'question':
      $message = message_create('user_add_question', array('uid' => $account->uid));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_message_question->set($node);
      $wrapper->field_published->set($node->status);
      // Set the answer and question count of the user at this moment
      $wrapper->field_user_answer_count->set($answer_count);
      $wrapper->field_user_question_count->set($question_count);
      $wrapper->save();
      break;
    // If the user is posting a new answer
    case 'answer':
      $question_nid = vrc_dashboard_get_question_nid_by_answer($node);
      if (!empty($question_nid)) {
        $question = node_load($question_nid);
        $message = message_create('user_add_answer', array('uid' => $account->uid));
        // @see: EntityDrupalWrapper for usage
        $wrapper = entity_metadata_wrapper('message', $message);
        $wrapper->field_message_question->set($question);
        $wrapper->field_message_answer->set($node);
        $wrapper->field_published->set($node->status);
        // Set the answer and question count of the user at this moment
        $wrapper->field_user_answer_count->set($answer_count);
        $wrapper->field_user_question_count->set($question_count);
        $wrapper->save();
      }
      break;
  }
}

/**
 * Implements hook_query_TAG_alter()
 */
function vrc_dashboard_query_dashboard_active_users_alter(QueryAlterableInterface $query) {

}

/**
 * Helper function
 *
 * Get the count of the answers the user has created
 */
function vrc_dashboard_get_user_answer_count($uid) {
  $count = db_query('SELECT count(n.nid) FROM {node} n WHERE n.uid = :uid AND n.type = :type', array(
      ':uid' => $uid, ':type' => 'answer'))->fetchField();
  return $count;
}

/**
 * Helper function
 *
 * Get the count of the question the user has created
 */
function vrc_dashboard_get_user_question_count($uid) {
  $count = db_query('SELECT count(n.nid) FROM {node} n WHERE n.uid = :uid AND n.type = :type', array(
      ':uid' => $uid, ':type' => 'question'))->fetchField();
  return $count;
}

/**
 * Helper function
 *
 * Get the question node's nid to which the answer is belonging
 */
function vrc_dashboard_get_question_nid_by_answer($answer) {
  if (is_numeric($answer)) {
    $answer = node_load($answer);
  }
  $items = field_get_items('node', $answer, 'field_answer_question');
  if (!empty($items)) {
    $first = array_shift($items);
    return $first['nid'];
  }
}
